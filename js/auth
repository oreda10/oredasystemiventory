// js/auth.js

// === AUTHENTICATION FUNCTIONS ===

// Login function
async function login(event) {
    event.preventDefault();
    
    const email = getElement('#loginEmail').value.trim();
    const password = getElement('#loginPassword').value.trim();
    const rememberMe = getElement('#rememberMe').checked;
    
    // Show loading
    showLoginLoading(true);
    
    try {
        // Wait for Supabase to be ready (CHANGED FROM FIREBASE)
        if (!window.supabaseReady) {
            await new Promise(resolve => {
                window.addEventListener('supabaseReady', resolve, { once: true });
            });
        }

        // Validate credentials
        if (email === AUTH_CONFIG.email && password === AUTH_CONFIG.password) {
            // Set user data
            appData.currentUser = { 
                email: email, 
                name: 'Admin',
                loginTime: new Date().toISOString()
            };
            
            // Set session storage for persistence
            sessionStorage.setItem('oredaLoggedIn', 'true');
            sessionStorage.setItem('oredaUser', JSON.stringify(appData.currentUser));
            
            // Save credentials if remember me is checked
            if (rememberMe) {
                saveToStorage('oredaRememberEmail', email);
                saveToStorage('oredaRememberPassword', password);
                saveToStorage('oredaRememberChecked', true);
            } else {
                removeFromStorage('oredaRememberEmail');
                removeFromStorage('oredaRememberPassword');
                removeFromStorage('oredaRememberChecked');
            }
            
            // Hide login page and show app
            getElement('#loginPage').style.display = 'none';
            getElement('#appContainer').style.display = 'block';
            
            // Initialize app
            await initializeApp();
            
            // Show dashboard
            showPage('dashboard', null);
            
        } else {
            throw new Error('Email atau password salah!');
        }
    } catch (error) {
        console.error('Login error:', error);
        showConfirm(
            error.message || 'Terjadi kesalahan saat login. Silakan coba lagi.',
            null,
            'OK',
            '',
            'Error Login',
            'x-circle'
        );
    } finally {
        // Hide loading
        showLoginLoading(false);
    }
}

// Logout function
function logout() {
    // Clean up listeners (CHANGED: Supabase cleanup)
    if (appData.listeners && appData.listeners.length > 0) {
        appData.listeners.forEach(subscription => {
            if (subscription && typeof subscription.unsubscribe === 'function') {
                subscription.unsubscribe();
            }
        });
        appData.listeners = [];
    }
    
    // Clean up charts
    destroyAllCharts();
    
    // Clear session storage
    sessionStorage.removeItem('oredaLoggedIn');
    sessionStorage.removeItem('oredaUser');
    
    // Reset app data
    appData.currentUser = null;
    appData.products = [];
    appData.sales = [];
    appData.stockHistory = [];
    appData.coupons = [];
    appData.selectedProducts.clear();
    
    // Clear login form but keep remembered credentials if checkbox was checked
    const rememberChecked = loadFromStorage('oredaRememberChecked', false);
    if (!rememberChecked) {
        removeFromStorage('oredaRememberEmail');
        removeFromStorage('oredaRememberPassword');
        getElement('#loginEmail').value = '';
        getElement('#loginPassword').value = '';
        getElement('#rememberMe').checked = false;
    }
    
    // Show login page
    getElement('#loginPage').style.display = 'flex';
    getElement('#appContainer').style.display = 'none';
    
    // Load remembered credentials
    loadRememberedCredentials();
}

// Check if user is logged in
function checkSession() {
    const isLoggedIn = sessionStorage.getItem('oredaLoggedIn');
    const userDataStr = sessionStorage.getItem('oredaUser');
    
    if (isLoggedIn === 'true' && userDataStr) {
        try {
            appData.currentUser = JSON.parse(userDataStr);
            
            // Check if session is expired (24 hours)
            const loginTime = new Date(appData.currentUser.loginTime || 0);
            const now = new Date();
            const sessionDuration = now - loginTime;
            const maxSessionDuration = 24 * 60 * 60 * 1000; // 24 hours
            
            if (sessionDuration > maxSessionDuration) {
                logout();
                return false;
            }
            
            // User is logged in, show app
            getElement('#loginPage').style.display = 'none';
            getElement('#appContainer').style.display = 'block';
            
            return true;
        } catch (error) {
            console.error('Error parsing user data:', error);
            sessionStorage.removeItem('oredaLoggedIn');
            sessionStorage.removeItem('oredaUser');
            return false;
        }
    }
    
    // User is not logged in, show login page
    getElement('#loginPage').style.display = 'flex';
    getElement('#appContainer').style.display = 'none';
    loadRememberedCredentials();
    return false;
}

// Load remembered credentials
function loadRememberedCredentials() {
    const rememberedEmail = loadFromStorage('oredaRememberEmail');
    const rememberedPassword = loadFromStorage('oredaRememberPassword');
    const rememberChecked = loadFromStorage('oredaRememberChecked', false);
    
    if (rememberedEmail && rememberedPassword && rememberChecked) {
        getElement('#loginEmail').value = rememberedEmail;
        getElement('#loginPassword').value = rememberedPassword;
        getElement('#rememberMe').checked = true;
    }
}

// Show/hide login loading
function showLoginLoading(show) {
    const loginText = getElement('#loginText');
    const loginLoader = getElement('#loginLoader');
    
    if (show) {
        loginText.style.display = 'none';
        loginLoader.classList.remove('hidden');
    } else {
        loginText.style.display = 'inline';
        loginLoader.classList.add('hidden');
    }
}

// Toggle password visibility - FIXED ERROR
function togglePassword() {
    const input = getElement('#loginPassword');
    const toggle = getElement('.password-toggle i');
    
    // Check if elements exist before accessing
    if (!input || !toggle) {
        return;
    }
    
    if (input.type === 'password') {
        input.type = 'text';
        toggle.setAttribute('data-lucide', 'eye-off');
    } else {
        input.type = 'password';
        toggle.setAttribute('data-lucide', 'eye');
    }
    
    // Reinitialize icons safely
    setTimeout(() => {
        try {
            if (typeof initializeIcons === 'function') {
                initializeIcons();
            }
        } catch (error) {
            console.warn('Error reinitializing icons:', error);
        }
    }, 100);
}

// === PERMISSION UTILITIES ===

// Check if user has permission (for future role-based access)
function hasPermission(permission) {
    if (!appData.currentUser) return false;
    
    // For now, all logged-in users have all permissions
    // This can be extended for role-based access control
    return true;
}

// Get user role (for future implementation)
function getUserRole() {
    if (!appData.currentUser) return null;
    return appData.currentUser.role || 'admin';
}

// Check if user is admin
function isAdmin() {
    return getUserRole() === 'admin';
}

// === SESSION MANAGEMENT ===

// Extend session
function extendSession() {
    if (appData.currentUser) {
        appData.currentUser.loginTime = new Date().toISOString();
        sessionStorage.setItem('oredaUser', JSON.stringify(appData.currentUser));
    }
}

// Auto logout after inactivity
let inactivityTimer;
const INACTIVITY_TIMEOUT = 60 * 60 * 1000; // 1 hour

function resetInactivityTimer() {
    clearTimeout(inactivityTimer);
    inactivityTimer = setTimeout(() => {
        if (appData.currentUser) {
            showConfirm(
                'Sesi Anda telah habis karena tidak ada aktivitas. Silakan login kembali.',
                () => logout(),
                'Login Ulang',
                '',
                'Sesi Habis',
                'clock'
            );
        }
    }, INACTIVITY_TIMEOUT);
}

// Track user activity
function trackActivity() {
    resetInactivityTimer();
    extendSession();
}

// Initialize activity tracking
function initializeActivityTracking() {
    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];
    
    events.forEach(event => {
        document.addEventListener(event, throttle(trackActivity, 30000), true); // Track every 30 seconds max
    });
    
    // Initial timer
    resetInactivityTimer();
}

// === SECURITY UTILITIES ===

// Simple encryption for sensitive data (not for production use)
function simpleEncrypt(text, key = 'oreda2024') {
    let result = '';
    for (let i = 0; i < text.length; i++) {
        result += String.fromCharCode(text.charCodeAt(i) ^ key.charCodeAt(i % key.length));
    }
    return btoa(result);
}

function simpleDecrypt(encrypted, key = 'oreda2024') {
    try {
        const text = atob(encrypted);
        let result = '';
        for (let i = 0; i < text.length; i++) {
            result += String.fromCharCode(text.charCodeAt(i) ^ key.charCodeAt(i % key.length));
        }
        return result;
    } catch (error) {
        return '';
    }
}

// === AUTO-LOGIN FOR DEVELOPMENT ===

// Auto-login in development mode (remove in production)
function autoLoginInDevelopment() {
    // Only in development mode
    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
        const urlParams = new URLSearchParams(window.location.search);
        if (urlParams.get('autologin') === 'true') {
            setTimeout(() => {
                getElement('#loginEmail').value = AUTH_CONFIG.email;
                getElement('#loginPassword').value = AUTH_CONFIG.password;
                getElement('#rememberMe').checked = true;
                
                // Auto-submit after a delay
                setTimeout(() => {
                    const form = getElement('#loginForm');
                    if (form) {
                        form.dispatchEvent(new Event('submit', { cancelable: true }));
                    }
                }, 1000);
            }, 500);
        }
    }
}

// === EVENT LISTENERS ===

// Initialize authentication
function initializeAuth() {
    // Setup login form
    const loginForm = getElement('#loginForm');
    if (loginForm) {
        loginForm.addEventListener('submit', login);
    }
    
    // Load remembered credentials
    loadRememberedCredentials();
    
    // Initialize activity tracking if user is logged in
    if (appData.currentUser) {
        initializeActivityTracking();
    }
    
    // Auto-login in development
    autoLoginInDevelopment();
}

// === EXPORT FOR MODULE USAGE ===
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        login,
        logout,
        checkSession,
        loadRememberedCredentials,
        showLoginLoading,
        togglePassword,
        hasPermission,
        getUserRole,
        isAdmin,
        extendSession,
        initializeAuth,
        trackActivity,
        initializeActivityTracking
    };
}
